# ======================================================================
# ctapipe-ml-train-energy-regressor config file.
# version: VERSION
#
# Configuration for training machine-learning models
# ======================================================================

TrainEnergyRegressor:
  random_seed: 0            # Seed used for sampling n_events for training
  n_events:                 # The number of events used for training that can be provided
    - [type, "LST*", None]  # independently for each telescope type (e.g. "LST_LST_LSTCam").
    - [type, "MST*", None]  # If none, all events in the file are used

  CrossValidator:
    n_cross_validations: 5
    rng_seed: 1337

  EnergyRegressor:
    prefix: ExtraTreesRegressor  # Prefix of the output generated by the EnergyRegressor
                                 # (Default: Name of the used scikit-learn algorithm).
    log_target: True             # If true, models predict log(energy) (output = exp(prediciton))

    # All regression algorithms in scikit-learn are supported (https://scikit-learn.org/stable/modules/classes.html)
    model_cls: ExtraTreesRegressor  # scikit-learn algorithm to be used for the models
    model_config:                   # Settings passed to the scikit-learn algorithm
      n_estimators: 10
      max_depth: 10
      n_jobs: -1

    QualityQuery:  # Event Selection performed before training the models
      quality_criteria:
      # - [<name>, <definition>]
        - ["HillasValid", "HillasReconstructor_is_valid"]
        - ["enough intensity", "hillas_intensity > 50"]
        - ["Positive width", "hillas_width > 0"]
        - ["enough pixels", "morphology_n_pixels > 3"]
        - ["not clipped", "leakage_intensity_width_2 < 0.5"]

    FeatureGenerator:  # On-the-fly generation of additional features
      features:        # Supported functions: "sin", "cos", "tan", "arctan2", "log", "log10", "exp", "sqrt"
      # - [<name>, <definition>]
        - ["area", "hillas_width * hillas_length"]
        - ["n_telescopes_triggered", "subarray.multiplicity(tels_with_trigger)"]
        - ["n_telescopes_hillas_reconstructor", "subarray.multiplicity(HillasReconstructor_telescopes)"]

    features:
      - hillas_intensity
      - hillas_r
      - hillas_length
      - hillas_width
      - hillas_skewness
      - hillas_kurtosis
      - timing_slope
      - timing_deviation
      - leakage_intensity_width_1
      - leakage_intensity_width_2
      - leakage_pixels_width_1
      - leakage_pixels_width_2
      - concentration_cog
      - concentration_core
      - morphology_n_islands
      - morphology_n_large_islands
      - morphology_n_medium_islands
      - morphology_n_pixels
      - morphology_n_small_islands
      - HillasReconstructor_tel_impact_distance
      - HillasReconstructor_average_intensity
      - HillasReconstructor_h_max
      - peak_time_std
      - peak_time_skewness
      - peak_time_kurtosis
      - intensity_max
      - intensity_mean
      - intensity_std
      - intensity_skewness
      - intensity_kurtosis
      - area                               # Features generated by the FeatureGenerator
      - n_telescopes_triggered             # still have to be listed here for the models
      - n_telescopes_hillas_reconstructor  # to use them.

    stereo_combiner_cls: "StereoMeanCombiner"  # No other combiners are implemented atm.
    StereoMeanCombiner:
      weights: None     # Options: None, intensity, konrad
      log_target: true  # If true, calculate exp(mean(log(values)))

